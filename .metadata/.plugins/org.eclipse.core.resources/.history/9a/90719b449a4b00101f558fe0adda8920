package com.Flipkart.testCases;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Keys;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.PageLoadStrategy;
import org.openqa.selenium.Point;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.interactions.Pause;
import org.openqa.selenium.interactions.PointerInput;
import org.openqa.selenium.interactions.Sequence;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Parameters;

import com.Flipkart.utilities.ReadConfig;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;


public class BaseClass{

	ReadConfig readconfig = new ReadConfig();
	
	public String url = readconfig.GetAppURL();
	protected static String failureMessage;
	public static WebDriver driver; 
	public static WebDriverWait wait;
	public static ExtentReports extent;

	public static ExtentSparkReporter htmlReporter;
	public static ExtentTest logger;

	
	SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmm");
	Date date = new Date();
	protected String date1 = dateFormat.format(date);
	 
	@BeforeSuite
	public void startReport() {
		htmlReporter = new ExtentSparkReporter(
//				System.getProperty("user.dir") + "/test-output/ExtentReport.html");
		System.getProperty("user.dir") + "/test-output/Flipkart_ExtentReport_" + date1 + ".html");
		extent = new ExtentReports();
		extent.attachReporter(htmlReporter);
		extent.setSystemInfo("Host Name", "Flipkart");
		extent.setSystemInfo("Environment", "Demo");
		extent.setSystemInfo("Browser", readconfig.Getbrowser());
		extent.setSystemInfo("User Name", "QA Tester");
	}

	@AfterSuite
	public void endReport() {
		extent.flush();
	}
	
	
	@SuppressWarnings("deprecation")
	@Parameters("browser")
	@BeforeClass
	public void setup(String browser) throws Exception
	{

		
		if(browser.equals("chrome"))
		{
		System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir")+"//Drivers//chromedriver.exe");
//		System.setProperty("webdriver.chrome.driver",readconfig.GetChromePath());
		Map<String, Object> prefs = new HashMap<String, Object>();
		prefs.put("profile.default_content_settings.popups", 0);
		prefs.put("safebrowsing.enabled", true);
		
		ChromeOptions options = new ChromeOptions();
		options.addArguments("--remote-allow-origins=*");
		options.setExperimentalOption("prefs", prefs);

		options.setPageLoadStrategy(PageLoadStrategy.NORMAL);
		options.addArguments("disable-infobars");
		options.addArguments("disable-popup-blocking");
		options.addArguments("disable-default-apps");
		
		options.addArguments("start-maximized");
		options.addArguments("--test-type");
		options.addArguments("--disable-extensions");
//		options.addArguments("--safebrowsing-disable-download-protection");
//		options.addArguments("safebrowsing-disable-extension-blacklist");
		options.setAcceptInsecureCerts(true);
		driver = new ChromeDriver(options);
		}
		
		else if(browser.equals("FF"))
		{
			System.setProperty("webdriver.gecko.driver",readconfig.GetFFPath());
			driver= new FirefoxDriver();
		}
		
		else if(browser.equals("IE"))
		{
			System.setProperty("webdriver.ie.driver",readconfig.GetIEPath());
			driver= new InternetExplorerDriver();
		}
		
		
		
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
		driver.manage().deleteAllCookies();
        driver.manage().window().maximize();
		driver.get(url);
		
	}
	
	
	@AfterClass
	public void teardown() {
		driver.quit();
	}
	
	@AfterMethod
	public void teardown1(ITestResult result) throws Exception {

		if (result.getStatus() == ITestResult.SUCCESS) {
			logger.log(Status.PASS,  result.getName()+ "  => Test Case Passed ");
			String screenshotPath = getScreenshot(driver, result.getName());
			logger.addScreenCaptureFromPath(screenshotPath);
		}

		else if (result.getStatus() == ITestResult.FAILURE) {
			logger.log(Status.FAIL, result.getName()+ "  => Test Case Failed ");
			logger.log(Status.FAIL, result.getThrowable());
			String screenshotPath = getScreenshot(driver, result.getName());
			logger.addScreenCaptureFromPath(screenshotPath);
		}
	}
		public static String getScreenshot(WebDriver driver, String screenshotName) throws IOException {
			String dateName = new SimpleDateFormat("ddMMyyyyhhmmss").format(new Date());
			TakesScreenshot ts = (TakesScreenshot) driver;
			File source = ts.getScreenshotAs(OutputType.FILE);
		 
			String destination = System.getProperty("user.dir") +"/Screenshots/" + screenshotName+"_" + dateName + ".png";
			//String destination = System.getProperty("user.dir") + "/Screenshots/" + screenshotName + dateName + ".png";
			File finalDestination = new File(destination);
			FileUtils.copyFile(source, finalDestination);
			return destination;
		}
	
	
	public static void wait(WebDriver driver, By fashionSection)
	{
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
		wait.until(ExpectedConditions.elementToBeClickable(fashionSection));

	}
	


	
	

	
}
